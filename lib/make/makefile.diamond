# makefile.diamond
#
# Library makefile to make running the Diamond aligner simpler.
#
# Include the full path of this file in your Makefile and making databases and
# running the aligner can be done via make. See documentation in in
# the biomakefile Git repository: doc/makefile.md and documentation for
# individual targets below.
#
# Author: erik.rikard.daniel@gmail.com

SHELL := /bin/bash

# *** Parameters ***

# Override in your Makefile by setting a parameter *after* the row that
# includes this file, see documentation in doc/makefile.md.

# DIAMOND_DB_PATH sets the directory where to look for generic database files
# like the protein RefSeq. The default is the current directory.
DIAMOND_DB_PATH = .

# Specify this when you want to point to a specific, non-generic, database.
# Full path, without ".dmnd".
DIAMOND_DB =

# DIAMOND_ALIGN_OPTS sets non-essential parameters for diamond alignment
#
# See the Diamond documentation available at GitHub:
# https://github.com/bbuchfink/diamond. 
#
# Look particularly at options for sensitivity, scoring and memory and
# performance.
#
# To set options, override this by inserting a row similar to the one below but
# with whatever options you'd like to add in your Makefile *after* you include
# this file.
# Set number of threads with --threads; supposedly works with both aligning and
# makedb.
# Set the output format of the DIAMOND results with --outfmt.
# The default value is 6 and refers to a tabular file (.m8 extension).
# For more format options see https://github.com/bbuchfink/diamond.
DIAMOND_ALIGN_OPTS  = 
DIAMOND_MAKEDB_OPTS = 

# *** Internal ***

# MAKECALL_DIAMOND is a macro that defines what will be output to the .makecall
# file, the file that records versions, file stamps, parameters etc.
#
# *Don't redefine!*
MAKECALL_VERSION     = echo "`date +"%Y-%m-%d %H:%M:%S"`: $@ was made with `diamond --version`" > $@.makecall
MAKECALL_PARAMS      = echo "	Called with parameters: $(DIAMOND_ALIGN_OPTS)" >> $@.makecall
MAKECALL_DB_RFP      = echo "	Database: $(DIAMOND_DB_PATH)/refseq_protein (`ls -lL $(DIAMOND_DB_PATH)/refseq_protein.dmnd`)" >> $@.makecall
MAKECALL_DB_BACMET      = echo "	Database: $(DIAMOND_DB_PATH)/bacmet (`ls -lL $(DIAMOND_DB_PATH)/bacmet.dmnd`)" >> $@.makecall
MAKECALL_DB_DEEPARG      = echo "	Database: $(DIAMOND_DB_PATH)/deeparg (`ls -lL $(DIAMOND_DB_PATH)/deeparg.dmnd`)" >> $@.makecall

MAKECALL_INFILES     = echo "	Input files: $^ (`ls -lL $^|tr '\n' ','`)" >> $@.makecall
MAKECALL_DIAMOND_RFP = $(MAKECALL_VERSION); $(MAKECALL_PARAMS); $(MAKECALL_DB_RFP); $(MAKECALL_INFILES)
MAKECALL_DIAMOND_BACMET = $(MAKECALL_VERSION); $(MAKECALL_PARAMS); $(MAKECALL_DB_BACMET); $(MAKECALL_INFILES)
MAKECALL_DIAMOND_DEEPARG = $(MAKECALL_VERSION); $(MAKECALL_PARAMS); $(MAKECALL_DB_DEEPARG); $(MAKECALL_INFILES)
MAKECALL_MAKEDB      = $(MAKECALL_VERSION); $(MAKECALL_INFILES)

# *** Targets ***

# Running the Diamond aligner
#

# Non-generic databases (requires the DIAMOND_DB to be set to the full path,
# except the .dmnd suffix, of the database file).

# RefSeq targets

# Run diamond against the NCBI RefSeq protein database for all fna.gz, fna or fastq.gz files in the directory.
fastq.gz2daas: $(subst .fastq.gz,.daa,$(wildcard *.fastq.gz))

%.daa: %.fna.gz
	$(MAKECALL_DIAMOND_RFP)
	diamond blastx -f 100 -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

%.daa: %.fna
	$(MAKECALL_DIAMOND_RFP)
	diamond blastx -f 100 -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

%.daa: %.fastq.gz
	$(MAKECALL_DIAMOND_RFP)
	diamond blastx -f 100 -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# Nucleotides in fastq.gz file against the NCBI RefSeq protein database
fastq.gz2refseq_protein.daas: $(subst .fastq.gz,.refseq_protein.daa,$(wildcard *.fastq.gz))

%.refseq_protein.daa: %.fastq.gz
	$(MAKECALL_DIAMOND_RFP)
	diamond blastx -f 100 -d $(DIAMOND_DB_PATH)/refseq_protein --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# Protein sequences in faa.gz file against the NCBI RefSeq protein database
faa2refseq_protein.daas: $(subst .faa.gz,.refseq_protein.daa,$(wildcard *.faa.gz)) $(subst .faa,.refseq_protein.daa,$(wildcard *.faa))

%.refseq_protein.daa: %.faa.gz
	$(MAKECALL_DIAMOND_RFP)
	diamond blastp -f 100 -d $(DIAMOND_DB_PATH)/refseq_protein --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

%.refseq_protein.daa: %.faa
	$(MAKECALL_DIAMOND_RFP)
	diamond blastp -f 100 -d $(DIAMOND_DB_PATH)/refseq_protein --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# Nucleotides in fna.gz file against the NCBI RefSeq protein database
fna2refseq_protein.daas: $(subst .fna.gz,.refseq_protein.daa,$(wildcard *.fna.gz)) $(subst .fna,.refseq_protein.daa,$(wildcard *.fna))

%.refseq_protein.daa: %.fna.gz
	$(MAKECALL_DIAMOND_RFP)
	diamond blastx -f 100 -d $(DIAMOND_DB_PATH)/refseq_protein --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

%.refseq_protein.daa: %.fna
	$(MAKECALL_DIAMOND_RFP)
	diamond blastx -f 100 -d $(DIAMOND_DB_PATH)/refseq_protein --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# BacMet targets

# Nucleotides or proteins in fastq/fna/faa files against the BacMet protein database
f2bacmetdb.m8s: $(subst .fastq.gz,.bacmet.m8,$(wildcard *.fastq.gz)) $(subst .fna,.bacmet.m8,$(wildcard *.fna)) $(subst .faa,.bacmet.m8,$(wildcard *.faa))

# Pattern for a BLASTx against a compressed nucleotide target (.fastq.gz)
%.bacmet.m8: %.fastq.gz
	$(MAKECALL_DIAMOND_BACMET)
	diamond blastx -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

#same pattern for a different target (.fna files)
%.bacmet.m8: %.fna
	$(MAKECALL_DIAMOND_BACMET)
	diamond blastx -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

#same pattern for a different target (.faa files)
%.bacmet.m8: %.faa
	$(MAKECALL_DIAMOND_BACMET)
	diamond blastp -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# DeepARG targets

# Nucleotides or proteins in fastq/fna/faa files against the DeepARG protein database
f2deepargdb.m8s: $(subst .fastq.gz,.argdb.m8,$(wildcard *.fastq.gz)) $(subst .fna,.argdb.m8,$(wildcard *.fna)) $(subst .faa,.argdb.m8,$(wildcard *.faa))

# Pattern for a BLASTx against a compressed nucleotide target (.fastq.gz)
%.argdb.m8: %.fastq.gz
	$(MAKECALL_DIAMOND_DEEPARG)
	diamond blastx -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

#same pattern for a different target (.fna files)
%.argdb.m8: %.fna
	$(MAKECALL_DIAMOND_DEEPARG)
	diamond blastx -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# Pattern for a BLASTp against a protein target (.faa files)
%.argdb.m8: %.faa
	$(MAKECALL_DIAMOND_DEEPARG)
	diamond blastp -d $(DIAMOND_DB) --query $< -o $@ $(DIAMOND_ALIGN_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall
 

# Reformating the daa output
all_blasttab.tsv.gzs: $(subst .daa,.blasttab.tsv.gz,$(wildcard *.daa))

%.blasttab.tsv.gz: %.daa
	diamond view --daa $< -f 6 | gzip -c > $@

# Creating the database

# From protein sequences in a file ending with .faa
# (Currently, Diamond only works with protein sequence databases.)
%.dmnd: %.faa.gz
	$(MAKECALL_MAKEDB)
	gunzip -c $< | diamond makedb -d $(basename $@) $(DIAMOND_MAKEDB_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

%.dmnd: %.faa
	$(MAKECALL_MAKEDB)
	diamond makedb --in $< -d $(basename $@) $(DIAMOND_MAKEDB_OPTS)
	echo "`date +"%Y-%m-%d %H:%M:%S"`: DONE" >> $@.makecall

# Creates md5sum unique hashes for DIAMOND .daa file extension
all_daa.md5sums: $(subst .daa,.daa.md5,$(wildcard *.daa))

%.daa.md5: %.daa
	md5sum $< > $@

# Creates md5sum unique hashes for blast tabular files
all_m8s.md5sums: $(subst .m8.gz,.m8.gz.md5,$(wildcard *.m8.gz)) $(subst .m8,.m8.md5,$(wildcard *.m8))

%.m8.gz.md5: %.m8.gz
	md5sum $< > $@

%.m8.md5: %.m8
	md5sum $< > $@

all_blasttab.md5sums: $(subst .blasttab.tsv.gz,.blasttab.tsv.gz.md5,$(wildcard *.blasttab.tsv.gz))

%.blasttab.tsv.gz.md5: %.blasttab.tsv.gz
	md5sum $< > $@

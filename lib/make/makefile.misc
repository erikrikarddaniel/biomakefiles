# makefile.misc
#
# Library makefile containing various simple pattern rules which doesn't fit
# anywhere else.
#
# Include the full path of this file in your Makefile ...
#
# Author: erik.rikard.daniel@gmail.com

SHELL := /bin/bash

# Set if you want to use the %.split_f[na]a targets below
N_SEQ_LINES = 200000

# Some general purpose macros

# Concate a number of gzipped files and write to a gzipped file.
CONCAT_GZIPPED = gunzip -c $^ | gzip -c > $@

# Put fasta sequences on one line
CLEAN_FASTA = awk '/^>/ { printf("\n%s\n",$$0); next; } { printf("%s",$$0);} END { printf("\n");}' | sed '/^$$/d' | sed '/^>/s/[ \t]\+/_/g' | sed '/^>/s/[(),:;+|]//g' | sed '/^>/!s/ //g'

SEQLENS = sed 's/> */>/' $< | sed '/^>/s/ .*//' | tr '\n' '\t' | sed 's/\t>/\n/g' | sed 's/\t$$/\n/g' | sed 's/^>//' | awk '{ print $$1 "\t" length($$2) }'

# *** Targets ***

# Interleave two fastq files (named %.r1.fastq and %.r2.fastq respectively).
#
# The target uses a python script -- interleave_fastq.py -- cloned from this
# gist:
#
#   https://gist.github.com/rpucheq/cf50eeea794529ca6b0e
#
# Dependencies will automatically be unzipped if not present in unzipped format
# thanks to the pattern above. Unzipped files will be deleted after
# interleaving.
interleave_all_fastq.gzs: $(subst .r1.fastq.gz,.intlv.fastq.gz,$(wildcard *.r1.fastq.gz))

%.intlv.fastq.gz: %.r1.fastq %.r2.fastq
	interleave_fastq.py $^ | gzip -c > $@

# The same, but not zipping
interleave_all_fastqs: $(subst .r1.fastq,.intlv.fastq,$(wildcard *.r1.fastq))

%.intlv.fastq: %.r1.fastq %.r2.fastq
	interleave_fastq.py $^ > $@
	
# Concatenate instead of interleave
%.concat.fastq.gz: %.r1.fastq.gz %.r2.fastq.gz
	$(CONCAT_GZIPPED)

# Clean up a fasta file so that names does not contain spaces, dashes and other
# characters that cause problems in various programs. Also places sequences on
# one line so that one can more easily select sequences with grep.

%.c.fna: %.fna
	cat $< | $(CLEAN_FASTA) > $@

%.c.fna.gz: %.fna.gz
	gunzip -c $< | $(CLEAN_FASTA) | gzip -c > $@

%.c.faa: %.faa
	cat $< | $(CLEAN_FASTA) > $@

%.c.faa.gz: %.faa.gz
	gunzip -c $< | $(CLEAN_FASTA) | gzip -c > $@

%.c.alnfna: %.alnfna
	cat $< | $(CLEAN_FASTA) > $@

%.c.alnfaa: %.alnfaa
	cat $< | $(CLEAN_FASTA) > $@

# Transform fasta files to tab separated tables (keeping the ">")
SEQTSV = cat $< | paste - - > $@

%.na.tsv: %.fna
	$(SEQTSV)

%.aa.tsv: %.faa
	$(SEQTSV)

%.alnna.tsv: %.alnfna
	$(SEQTSV)

%.alnaa.tsv: %.alnfaa
	$(SEQTSV)

# Convert stockholm alignment format (hmmer) to alnfaa. Requires the any2fasta
# program (https://github.com/tseemann/any2fasta; hopefully my PR is accepted
# and -S supported in upstream, otherwise use my version: 
# https://github.com/erikrikarddaniel).
%.alnfaa: %.sth
	any2fasta -S $< > $@

# Calculate tsv file with sequence lengths. Should be run on files that have 
# already been cleaned with CLEAN_FASTA, see above.
# Note: There are targets for %.seqlens.tsv below; they are for statistics and
# does not give a table of sequence name + sequence length.
%.seqlen.tsv: %.fna
	$(SEQLENS) > $@

%.seqlen.tsv: %.faa
	$(SEQLENS) > $@

%.seqlen.tsv: %.alnfna
	$(SEQLENS) > $@

%.seqlen.tsv: %.alnfaa
	$(SEQLENS) > $@

ONLY_ACCNO = sed '/^>/s/>.*\(_accno_\)\|\(@\)\(.*\)/>\3/' $< > $@

%.only_accno.faa: %.faa
	$(ONLY_ACCNO)

%.only_accno.faa: %.faa
	$(ONLY_ACCNO)

%.phylip: %.alnfaa
	echo "$$(grep -c '>' $<) $$(grep -v '>' $< | head -n 1 | awk '{ print length($$1); }')" > $@
	awk '/^>(.*)/ { printf("%d ", substr($$1, 2)); next; } !/^>/ { print $$0; }' $< >> $@

fastqgzs2seqlens: $(subst .fastq.gz,.seqlens.tsv,$(wildcard *.fastq.gz))

all_seqlens.tsv: $(subst .fastq.gz,.seqlens.tsv,$(wildcard *.fastq.gz)) $(subst .fna.gz,.seqlens.tsv,$(wildcard *.fna.gz)) $(subst .fna,.seqlens.tsv,$(wildcard *.fna))
	for f in $^; do \
	  cat $$f | sed "s/^/$$(basename $$f .seqlens.tsv)\t&/"; \
	done

%.seqlens.tsv: %.fastq.gz
	echo "seqlen	n" > $@
	gunzip -c $< | awk 'NR%4 == 2 {lengths[length($0)]++} END {for (l in lengths) {print l,"\t",lengths[l]}}' | sed 's/ *//g' >> $@

%.seqlens.tsv: %.fna.gz
	echo "seqlen	n" > $@
	gunzip -c $< | awk 'NR%2 == 0 {lengths[length($0)]++} END {for (l in lengths) {print l,"\t",lengths[l]}}' | sed 's/ *//g' >> $@

%.seqlens.tsv: %.fna
	echo "seqlen	n" > $@
	awk 'NR%2 == 0 {lengths[length($0)]++} END {for (l in lengths) {print l,"\t",lengths[l]}}' $< | sed 's/ *//g' >> $@

# Count the number of sequences in a set of r1.fastq.gz files
r1.seqcounts.tsv: $(subst .fastq.gz,.seqcount,$(wildcard *.r1.fastq.gz))
	for f in $^; do \
	  echo "$$(basename $$f .r1.seqcount)	$$(cat $$f)"; \
	done > $@

# Make an individual seqcount file from a gzipped fastq file. Used by the r1.seqcounts.tsv target above.
%.seqcount: %.fastq.gz
	echo $$(expr $$(gunzip -c $< | wc -l) / 4) > $@

# Gunzip an fna.gz file
%.fna: %.fna.gz
	gunzip -c $< > $@

# Convert a gzipped fastq file to fasta
%.fna: %.fastq.gz
	gunzip -c $< | fastq_to_fasta > $@

# Convert a gzipped fastq file to gzipped fasta
%.fna.gz: %.fastq.gz
	gunzip -c $< | fastq_to_fasta | gzip -c > $@

# Count the total number of nucleotides in a set of .fna files
numnucl.tsv: $(subst .fna,.numnucl.tsv,$(wildcard *.fna))
	cat $^ > $@

%.numnucl.tsv: %.fna
	echo "$<	$$(grep -v '>' $< | tr -d '\n' | awk '{ print length; }')" > $@

# Translate DNA fasta files to AA fasta files with Emboss' transeq
%.faa: %.fna
	transeq -sequence $< -outseq $@

%.faa.gz: %.fna.gz
	transeq -sequence <(gunzip -c $<) -outseq >(gzip -c > $@)

%.alnfaa: %.alnfna
	transeq -sequence $< -outseq $@

# This splits an input fasta file into smaller files, each containing N_SEQ_LINES/2 sequences.
%.split_faa: %.faa.gz
	gunzip -c $< | $(CLEAN_FASTA) | split -l $(N_SEQ_LINES) -a 5 -d --additional-suffix=.faa - $(basename $@).
	touch $@
	
%.split_faa: %.faa
	cat $< | $(CLEAN_FASTA) | split -l $(N_SEQ_LINES) -a 5 -d --additional-suffix=.faa - $(basename $@).
	touch $@
	
%.split_fna: %.fna.gz
	gunzip -c $< | $(CLEAN_FASTA) | split -l $(N_SEQ_LINES) -a 5 -d --additional-suffix=.fna - $(basename $@).
	touch $@
	
%.split_fna: %.fna
	cat $< | $(CLEAN_FASTA) | split -l $(N_SEQ_LINES) -a 5 -d --additional-suffix=.fna - $(basename $@).
	touch $@
	
# Mask a multiple alignment. Uses the maskaln.r script from the
# https://github.com/erikrikarddaniel/maskaln repo.

MASKALN_OPTS =

%.masked.alnfaa: %.alnfaa %.protect
	maskaln.r --protect_taxa $(word 2,$^) $(MASKALN_OPTS) $< $@

%.masked.alnfaa: %.alnfaa
	maskaln.r $(MASKALN_OPTS) $< $@

# makefile.raxml-ng
#
# Library makefile to make running raxml-ng simpler.
#
# Include the full path of this file in your Makefile ...
#
# Author: daniel.lundin@dbb.su.se

SHELL := /bin/bash

# *** Parameters ***

# Override in your Makefile by setting a parameter *after* the row that
# includes this file, see documentation in doc/makefile.md.

RAXML_NG_SEED = SET SEED TO SOMETHING
RAXML_NG_N_STARTING_TREES = 10

# Set to --threads N after running the rba target
RAXML_NG_OPTS =

# *** Internal ***

# MAKECALL_RAXML_NG is a macro that defines what will be output to the .makecall
# file, the file that records versions, file stamps, parameters etc.
#
# *Don't redefine!*
MAKECALL_RAXML_NG_VERSION     = echo "`date +"%Y%m%d %H:%M:%S"`: $@ was made with `raxml-ng --version | grep RAxML-NG`" > $@.makecall
MAKECALL_RAXML_NG_PARAMS      = echo "	Called with parameters: $(RAXML_NG_OPTS)" >> $@.makecall
MAKECALL_RAXML_NG_INFILES     = echo "	Input files: $^ (`ls -lL $^|tr '\n' ','`)" >> $@.makecall
MAKECALL_RAXML_NG             = $(MAKECALL_RAXML_NG_VERSION); $(MAKECALL_RAXML_NG_PARAMS); $(MAKECALL_RAXML_NG_INFILES)

# *** Targets ***

.SECONDARY:

# Nucleotide targets
%.GTRG8F.raxml.rba: %.alnfna
	raxml-ng --parse --msa $< --model GTR+G8+F --prefix $(basename $(basename $@))

# Amino acid targets
%.LGG8F.raxml.rba: %.alnfaa
	raxml-ng --parse --msa $< --model LG+G8+F --prefix $(basename $(basename $@))

%.raxml.bestTree: %.raxml.rba
	raxml-ng --all --msa $< --prefix $(basename $(basename $@)) $(RAXML_NG_OPTS) --seed $(RAXML_NG_SEED) --tree pars{$(RAXML_NG_N_STARTING_TREES)},rand{$(RAXML_NG_N_STARTING_TREES)}

%.raxml.bs.bestTree: %.raxml.rba
	raxml-ng --all --msa $< --prefix $(basename $(basename $@)) $(RAXML_NG_OPTS) --seed $(RAXML_NG_SEED) --tree pars{$(RAXML_NG_N_STARTING_TREES)},rand{$(RAXML_NG_N_STARTING_TREES)} --bs-metric fbp,tbe

%.LGG8F.ancstates.raxml-ng: %.rx.alnfaa %.newick
	@$(MAKECALL_RAXML_NG)
	raxml-ng --ancestral --msa $< --tree $(word 2,$^) --model LG+G8+F --prefix $(basename $@) $(RAXML_NG_OPTS) 2>&1 | tee $@
	ln -s $(basename $@).raxml.ancestralTree $(basename $@).newick
	sed "s/\(.*\)\t\(.*\)/>\1\n\2/" $(basename $@).raxml.ancestralStates > $(basename $@).alnfaa
	@echo "`date +"%Y%m%d %H:%M:%S"`: DONE" >> $@.makecall

%.rf.rfDistances: %.mlTrees.gz
	raxml-ng --rfdist --tree <(gunzip -c $<) --prefix $(basename $@)

# Run on the log from tree estimation
%.likelihoods.tsv: %.log
	echo "tree	log_likelihood" > $@
	grep 'ML tree search #' $< | sed 's/.*#//'|sed 's/, logLikelihood: /\t/' >> $@

# Run on the log from tree estimation
%.runstats.tsv: %.log %.rf.raxml.log
	echo "raxml_version	run_mode	start_trees	model	n_sites	n_patterns	perc_gaps	perc_invariant	n_bootstraps	n_uniq_topos	mean_absolute_rf	mean_relative_rf	command" > $@
	echo "$$(grep '^RAxML-NG v.' $<)	$$(grep 'run mode:' $< | sed 's/.*run mode: //')	$$(grep 'start tree' $< | sed 's/.*start tree(s): //')	$$(grep 'Model:' $< | sed 's/.*Model: //')	$$(grep 'Alignment sites' $< | sed 's/.*: //' | sed 's:/:\t:')	$$(grep 'Gaps:' $< | sed 's/.*Gaps: \([0-9.]\+\).*/\1/')	$$(grep 'Invariant sites:' $< | sed 's/.*Invariant sites: \([0-9.]\+\).*/\1/')	$$(grep 'Bootstrapping converged after' $< | sed 's/.*Bootstrapping converged after \([0-9]\+\).*/\1/')	$$(grep 'Number of unique topologies in this tree set' $(word 2, $^) | sed 's/Number of unique topologies in this tree set: //')	$$(grep 'Average absolute RF distance in this tree set: ' $(word 2,$^) | sed 's/Average absolute RF distance in this tree set: //')	$$(grep 'Average relative RF distance in this tree set: ' $(word 2,$^) | sed 's/Average relative RF distance in this tree set: //')	$$(grep '^raxml-ng' $<)" >> $@

# Decorate a tree with bootstraps
%.support: %.bestTree %.bootstraps.gz
	raxml-ng --support --tree $< --bs-trees <(gunzip -c $(word 2,$^)) --prefix $(basename $@) --threads 2
